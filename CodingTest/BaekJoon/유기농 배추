import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;


public class 유기농_배추 {

    static int testCase;
    static int height, width, cabbageNum;

    static int count;
    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

    static int[][] field = {};
    static boolean[][] visited = {};


    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//        BufferedReader br = new BufferedReader(new FileReader("test.txt"));

        testCase = Integer.parseInt(br.readLine());

        for (int i = 0; i < testCase; i++) {
            StringTokenizer fieldInfoSt = new StringTokenizer(br.readLine());

            width = Integer.parseInt(fieldInfoSt.nextToken());
            height = Integer.parseInt(fieldInfoSt.nextToken());
            cabbageNum = Integer.parseInt(fieldInfoSt.nextToken());

            field = new int[height][width];
            visited = new boolean[height][width];
            count = 0;

            for (int j = 0; j < cabbageNum; j++) {
                StringTokenizer cabbagePositionSt = new StringTokenizer(br.readLine());
                int y = Integer.parseInt(cabbagePositionSt.nextToken());
                int x = Integer.parseInt(cabbagePositionSt.nextToken());

                field[x][y] = 1;
            }

            for (int k = 0; k < height; k++) {
                for (int l = 0; l < width; l++) {
                    if (field[k][l] == 1 && !visited[k][l]){
                        dfs(k, l);
                        count++;
                    }
                }
            }

            System.out.println(count);
        }
    }

    private static void dfs(int x, int y) {

        visited[x][y] = true;

        for (int i = 0; i <4; i++) {
            int currentX = x + dx[i];
            int currentY = y + dy[i];

            if (currentX > -1 &&
                    currentX < height &&
                    currentY > -1 &&
                    currentY < width &&
                    !visited[currentX][currentY] && field[currentX][currentY] == 1){
                dfs(currentX,currentY);
            }
        }
    }
}
